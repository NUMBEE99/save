# 필요한 import 하기
import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Model, load_model
from tensorflow.keras import preprocessing
import os

from chatbot.utils.Preprocess import Preprocess
p = Preprocess(word2index_dic=os.path.join('chatbot/train_tools/dict', 'chatbot_dict.bin'),
               userdic=os.path.join('chatbot/utils', 'user_dic.tsv'))

# 개체명 인식할.. 질의어
query = '오늘 오전 13시 2분에 탕수육 주문 하고 싶어요'

# BIO 태그 클래스 별 레이블
index_to_ner = {1: 'O', 2: 'B_DT', 3: 'B_FOOD', 4: 'I', 5: 'B_OG', 6: 'B_PS', 7: 'B_LC', 8: 'NNP', 9: 'B_TI', 0: 'PAD'}

# 의도 분류 모델 불러오기
model_name=os.path.join('chatbot/models/ner', 'ner_model.h5')
model = load_model(model_name)

#### 개체명 클래스 예측

# 형태소 분석
pos = p.pos(query)
pos

keywords = p.get_keywords(pos, without_tag=True)
keywords

# 준비된 단어사전을 통해 sequence 인덱스변혼
sequences = [p.get_wordidx_sequence(keywords)]
sequences

# 패딩처리
max_len = 40
padded_seqs = preprocessing.sequence.pad_sequences(sequences, padding="post", value=0, maxlen=max_len)
padded_seqs

# 예측하기
predict = model.predict(np.array([padded_seqs[0]]))
predict

predict_class = tf.math.argmax(predict, axis=-1)
predict_class  # 결과는 2차원 Tensor

predict_class.numpy()[0]

tags = [index_to_ner[i] for i in predict_class.numpy()[0]]
print(tags)

keywords

# 개체명 클래스 예측 결과
predicts  = list(zip(keywords, tags))  
predicts

tags = []
for tag_idx in predict_class.numpy()[0]:
    if tag_idx == 1: continue   # O tag 를 제외하고 담아보기
    tags.append(index_to_ner[tag_idx])

tags

#### 챗봇 엔진 개체명 인식 모듈
**/models/ner/NerModel.py** 생성

import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Model, load_model
from tensorflow.keras import preprocessing


# 개체명 인식 모델 모듈
class NerModel:
    def __init__(self, model_name, preprocess):

        # BIO 태그 클래스 별 레이블
        self.index_to_ner = {1: 'O', 2: 'B_DT', 3: 'B_FOOD', 4: 'I', 5: 'B_OG', 6: 'B_PS', 7: 'B_LC', 8: 'NNP', 9: 'B_TI', 0: 'PAD'}

        # 의도 분류 모델 불러오기
        self.model = load_model(model_name)

        # 챗봇 Preprocess 객체
        self.p = preprocess


    # 개체명 클래스 예측
    def predict(self, query):
        # 형태소 분석
        pos = self.p.pos(query)

        # 문장내 키워드 추출(불용어 제거)
        keywords = self.p.get_keywords(pos, without_tag=True)
        sequences = [self.p.get_wordidx_sequence(keywords)]

        # 패딩처리
        max_len = 40
        padded_seqs = preprocessing.sequence.pad_sequences(sequences, padding="post", value=0, maxlen=max_len)

        predict = self.model.predict(np.array([padded_seqs[0]]))
        predict_class = tf.math.argmax(predict, axis=-1)

        tags = [self.index_to_ner[i] for i in predict_class.numpy()[0]]
        return list(zip(keywords, tags))

    def predict_tags(self, query):
        # 형태소 분석
        pos = self.p.pos(query)

        # 문장내 키워드 추출(불용어 제거)
        keywords = self.p.get_keywords(pos, without_tag=True)
        sequences = [self.p.get_wordidx_sequence(keywords)]

        # 패딩처리
        max_len = 40
        padded_seqs = preprocessing.sequence.pad_sequences(sequences, padding="post", value=0, maxlen=max_len)

        predict = self.model.predict(np.array([padded_seqs[0]]))
        predict_class = tf.math.argmax(predict, axis=-1)

        tags = []
        for tag_idx in predict_class.numpy()[0]:
            if tag_idx == 1: continue
            tags.append(self.index_to_ner[tag_idx])

        if len(tags) == 0: return None
        return tags
