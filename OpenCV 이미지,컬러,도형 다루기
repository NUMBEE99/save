# OpenCV

- 실시간 컴퓨터 비전을 목적으로, 실시간 이미지 프로세싱에 중점을 둔 한 프로그래밍 라이브러리



## OpenCV 설치
- pip install opencv-python
- pip install opencv-contrib-python   (← OpenCV 추가 모듈도 사용하려면 설치)


#### OpenCV 최신버젼 확인

- 2022.11 현재 4.6.0
- ※ v4.2 는 버그 있다

# 이미지와 색공간
- **0 ~ 255 사이의 값**으로 밝기를 표현

- color: 3차원 (true color 라고도 불림)

  
- gray scale: 2차원 
  - 0~255의 값을 통해 밝기를 표현 
  - 0으로 갈수록 어두워지고, 255로 갈수록 밝아짐 


# 이미지와 넘파이
- 이미지는 배열로 표현 가능 (numpy)

## 이미지 읽기 1

- `pillow`, `matplotlib`와 `OpenCV` 모두 가능

- 구글 코랩(Colab), 쥬피터 노트북과 같은 환경에서는 pillow(PIL), matplotlib이 더 적합

- OpenCV는 주로 파이썬 스크립트 환경에서 사용
  - colab 에서는 `from google.colab.patches import cv2_imshow`으로  
    이미지는 출력할 수는 있지만 동영상 관련 처리는 불가

import cv2
print(cv2.__version__)

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
plt.style.use('seaborn-white')

from PIL import Image
import requests
from io import BytesIO  # binary 파일 입출력

base_path = r'D:\DevRoot\dataset\ComputerVision\01'

- url과 Image객체를 활용하여 이미지 읽기
  - https://cdn.pixabay.com/photo/2018/10/01/09/21/pets-3715733_960_720.jpg

url = 'https://cdn.pixabay.com/photo/2018/10/01/09/21/pets-3715733_960_720.jpg'
response = requests.get(url)
pic = Image.open(BytesIO(response.content))

## 이미지 출력 1

- 이미지 확인 (`pillow`)
  - Image 객체

type(pic)

pic

# PIL 이미지를 array 로 변환
pic_arr = np.asarray(pic)

pic_arr.shape

pic_arr

plt.imshow(pic_arr)
plt.show()

## 이미지 출력 2
- R, G, B 에 따라 이미지 확인

pic_copy = pic_arr.copy()  # 복사본

plt.imshow(pic_copy)
plt.show()

- 채널순서 (R G B : 0 1 2)
    - R channel

pic_copy[:, :, 0]  # Red

pic_copy[:, :, 0].shape

plt.imshow(pic_copy[:, :, 0], cmap='gray')
plt.show()

- 채널순서 (R G B : 0 1 2)
    - G channel

pic_copy[:, :, 1]

plt.imshow(pic_copy[:, :, 1], cmap='gray')
plt.show()

- 채널순서 (R G B : 0 1 2)
    - B channel

pic_copy[:, :, 2]

plt.imshow(pic_copy[:, :, 2], cmap='gray')
plt.show()

- `R channel` 분포 확인

pic_red = pic_arr.copy()
# G, B 을 0으로 바꿈
pic_red[:, :, 1] = 0
pic_red[:, :, 2] = 0

pic_red

plt.imshow(pic_red)
plt.show()

- `G channel` 확인

pic_green = pic_arr.copy()
pic_green[:, :, 0] = 0 
pic_green[:, :, 2] = 0

pic_green

plt.imshow(pic_green)
plt.show()

- `B channel` 확인

pic_blue = pic_arr.copy()
pic_blue[:, :, 0] = 0
pic_blue[:, :, 1] = 0

pic_blue

plt.imshow(pic_blue)
plt.show()

## 이미지 출력3 
- `OpenCV`

cv2.namedWindow('image')   # 새로운 창을 만들고 창의 이름은 'image' (고유한 문자열로 주어야 한다)
cv2.imshow('image', pic_arr)   # 불러온 이미지 img 를 'image' 라는 창에다 출력하기
                           # 만약 'image' 라는 창이 없으면 'image' 라는 창을 새로 만들어 보여준다
    
cv2.waitKey(0)  # waitKey() 사용자 입력까지 기다림. 매개변수 0 이면 입력할때까지 무한 기다림.
                # ex) waitKey(2000) 2초동안 입력 기다림.
    
cv2.destroyAllWindows()   # 열려져 있는 모든 창 닫음.    

def cv2_imshow(image):    
    cv2.imshow('image', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

cv2_imshow(pic_arr)

# ↑ 색상이 이상하다 왜?

## OpenCV 의 채널 순서
- OpenCV를 통해 영상(이미지)을 다룰 때의 채널 순서는 B G R
- matplotlib은 R G B 순서

- `cv2.cvtColor()`
  
  - image arrary, 변경할 색공간을 인자로 넣어줌 

  - 변경할 색공간은 여러 가지가 있음
    - `cv2.COLOR_BGR2RGB`

    - `cv2.COLOR_RGB2GRAY`

    - `cv2.COLOR_GRAY2RGB`

    - ...

image = cv2.cvtColor(pic_arr, cv2.COLOR_RGB2BGR)

cv2_imshow(image)

- image, pic_arr 비교
    - 0 1 2 인덱스 중 0, 2 가 바뀐것 확인

image[0, 0]  # BGR

pic_arr[0, 0] # RGB

- (참고) array[ : ,  : ,  : : -1] 을 통해서도 인덱스 순서를 바꿀 수 있음

temp_arr = pic_arr[:, :, ::-1]

cv2_imshow(temp_arr)

temp_arr

pic_arr

## 이미지 읽기 2
- `cv2.imread()`

  - path, 이미지 파일의 flag값을 인자로 넣어줌

    - `cv2.IMREAD_COLOR`  
      이미지 파일을 Color로 읽어들이고, 투명한 부분은 무시되며, Default 값
    
    - `cv2.IMREAD_GRAYSCALE`  
      이미지를 Grayscale로 읽음. 실제 이미지 처리시 중간단계로 많이 사용
    
    - `cv2.IMREAD_UNCHANGED`  
      이미지 파일을 alpha channel (투명도)까지 포함하여 읽어 들임

- **(주의)**
  - `cv2.imread()`는 잘못된 경로로 읽어도 `NoneType`으로 들어갈 뿐, <u>오류를 발생하지 않음</u>

image = cv2.imread(os.path.join(base_path, 'Lenna.png'), cv2.IMREAD_UNCHANGED)

image.shape

type(image)

cv2_imshow(image)

plt.imshow(image)
plt.show()

# ↓ 앗! 채널!

image_temp = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image_temp)
plt.show()

- `grayscale` 로 읽기

img_gray = cv2.imread(os.path.join(base_path, 'Lenna.png'), cv2.IMREAD_GRAYSCALE)

img_gray.shape  # 2차원!

cv2_imshow(img_gray)

plt.imshow(img_gray, cmap='gray')
plt.show()

plt.imshow(img_gray, cmap='ocean')
plt.show()

plt.imshow(img_gray, cmap='magma')
plt.show()

plt.imshow(img_gray, cmap='coolwarm')
plt.show()

## 이미지 저장
- `cv2.imwrite()`
  - 경로, 이미지 배열을 인자로 받음

random_image = np.random.randint(0, 256, size=(200, 200, 3))

random_image.shape

plt.imshow(random_image)
plt.show()

cv2.imwrite(os.path.join(base_path, 'out', 'random_image.png'), random_image)

# 이미지 저장 성공하면 True 리턴

# 없는 이미지 읽으면 NoneType 리턴
no_img = cv2.imread('xxxx.png')

no_img

type(no_img)

# 컬러 매핑(Color Mapping)

- 주로 그레이 스케일(Grayscale), 트루 컬러(True Color, RGB)이미지를 많이 활용

- 다양한 색 공간(ex, `HSV`, `YCrCB` 등)이 존재하고 이들을 변환할 수 있음
  
- 컬러 영상 처리에서 `HSV`와 `HSL`은 같은 색 공간을 이용하여 색상 구분에 용이하고, `YCrCb`와 `YUV`는 휘도 성분 구분에 용이

- `cv2.cvtColor()` 활용

## 색 공간의 종류 (참고)

- RGB
  - 컬러 표현을 빛의 3원색인 (Red, Green, Blue)으로 서로 다른 비율을 통해 색 표현

- CMYK
  - Cyan, Magenta, Yellow, Black를 기본으로 하여 주로 컬러 프린터나 인쇄시에 사용

  - 각 성분들의 감산에 의해 컬러 구현

- YUV

  - Y축은 밝기 성분을 U,V 두축을 이용하여 색상을 표현
  
  - U축은 파란색에서 밝기 성분을 뺀 값, V축은 빨간색에서 밝기 성분을 뺀 값
    
  - 아날로그 컬러신호 변환에 주로 사용.  (U = B - Y) , (V = R - Y)

- YCbCr
  
  - Digital TV에서 사용하는 색공간
  
  - YPbPr이라는 아날로그 신호의 색공간을 디지털화한 것
  
  - YPbPr은 아날로그 컴포넌트 비디오에서 사용


## RGB Color Space

- 빛의 삼원색 조합으로 색을 표현
  - `R`(빨간색), `G`(초록색), `B`(파란색)

- 디지털 컬러 영상을 획득할 때 사용

- 보편적으로 사용되고 있지만 '컬러 영상 처리'에서는 주로 사용되지 않음

  
 
origin_img = cv2.imread(os.path.join(base_path, 'dog1.jpg'))
origin_img.shape

cv2_imshow(origin_img)

def plt_imshow_bgr(bgr_img):
    cvtImg = cv2.cvtColor(bgr_img, cv2.COLOR_BGR2RGB)
    plt.imshow(cvtImg)
    plt.show()

plt_imshow_bgr(origin_img)

plt.imshow(origin_img)
plt.show()

## HSV Color Space

- 색상(Hue), 채도(Saturation), 명도(Value)로 색을 표현

- 색상은 흔히 빨간색, 노란색 등과 같은 색의 종류

- 채도는 색의 순도  

  예들 들어, 파란색에서 
  
  - 채도가 높으면 맑고 선한 파란색

  - 채도가 낮으면 탁한 파란색

- 명도는 빛의 세기

  - 명도가 높으면 밝고, 낮으면 어둡게 느껴진다.

- OpenCV에서 `BGR2HSV` 색 공간 변환할 경우,  
  - `H` : 0 ~ 179 사이의 정수로 표현
    - 색상 값은 0° ~ 360° 로 표현하지만  
      uchar 자료형은 256이상의 정수를 표현할 수 없기 때문에 OpenCV에서는 각도를 2로 나눈 값을 H로 저장

  - `S` : 0 ~ 255 사이의 정수로 표현

  - `V` : 0 ~ 255 사이의 정수로 표현

- 사람이 실제로 색을 인지하는 방식

  <br>

  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/HSV_cone.jpg/400px-HSV_cone.jpg">

  <sub>[이미지 출처] https://ko.wikipedia.org/wiki/HSV_%EC%83%89_%EA%B3%B5%EA%B0%84</sub>

img_hsv = cv2.cvtColor(origin_img, cv2.COLOR_BGR2HSV)

plt.imshow(img_hsv)
plt.show()

img_hsv  # [H, S, V]

# S, V : 0 ~ 255
# H : 0 ~ 179

np.max(img_hsv), np.min(img_hsv)

# H값  0 ~ 179

np.max(img_hsv[:, :, 0]), np.min(img_hsv[:, :, 0])

## HSL Color Space

- 색상(Hue), 채도(Saturation), 밝기(Lightness)로 색을 표현하는 방식

- HSV와 동일하지만 **밝기** 요소의 차이

- HSV와 더불어 사람이 실제로 color를 인지하는 방식과 유사

  <br>

  <img src="https://rgbtohex.page/imgs/hsl-cylinder.png">

  <sub>[이미지 출처] https://rgbtohex.page/hsl</sub>

img_hsl = cv2.cvtColor(origin_img, cv2.COLOR_BGR2HLS)

# TODO

## YCrCb Color Space

- Y 성분은 밝기 또는 휘도(luminance), Cr, Cb 성분은 색상 또는 색차(chrominance)를 나타냄

- Cr, Cb는 오직 색상 정보만 가지고 있음. 밝기 정보 X

- 영상을 GrayScale 정보와 색상 정보로 분리하여 처리할 때 유용

- `Y`, `Cr`, `Cb`  : 0 ~ 255 사이의 정수로 표현



 
img_ycrcb = cv2.cvtColor(origin_img, cv2.COLOR_BGR2YCrCb)



## GrayScale Color Space

- 영상의 밝기 정보를 256단계 (0 ~ 255) 로 구분하여 표현

- 가장 밝은 흰색 : 255  
  가장 어두운 검은색 : 0

  <img src="https://miro.medium.com/max/1400/1*euc4RxnNo78LFEGrb-QZ7w.jpeg">

  <sub>[이미지 출처] https://medium.com/@himnickson/converting-rgb-image-to-the-grayscale-image-in-java-9e1edc5bd6e7</sub>

img_gray = cv2.cvtColor(origin_img, cv2.COLOR_BGR2GRAY)

img_gray.shape

plt.imshow(img_gray, cmap='gray')
plt.show()

# 도형 그리기

- 다양한 도형을 그릴 수 있음

- 도형을 그리는 좌표가 해당 범위를 넘어가면 이미지에 표현되지 않음

# 검정 이미지 준비
img = np.zeros((512, 512, 3), np.uint8)

plt.imshow(img)
plt.show()

## Line 그리기

- `cv.line()`

  - `Parameters`  	
    - `img` : 그림을 그릴 이미지 파일

    - `start` : 시작 좌표

    - `end` : 종료 좌표

    - `color` : BGR형태의 Color (ex; (255, 0, 0) -> Blue)

    - `thickness` (int) : 선의 두께. pixel
    <br>
- ★리턴값은 적용된 이미지 데이터, 그러나 `img` 원본도 변화된다!!!!!   ★

img = cv2.line(img, (0, 0), (511, 511), (255, 0, 0), 5)

plt.imshow(img)
plt.show()

cv2_imshow(img)

## rectangle 그리기

- `cv2.rectangle()`

  - `Parameters`  	
    - `img` : 그림을 그릴 이미지

    - `start` : 시작 좌표

    - `end` : 종료 좌표

    - `color` : BGR형태의 Color(ex; (255, 0, 0) -> Blue)

    - `thickness` (int) : 선의 두께. pixel

img = cv2.rectangle(img, (384, 0), (510, 128), (0, 255, 0), 3)

plt.imshow(img)
plt.show()

## Circle 그리기

- `cv2.circle()`

  - `Parameters`  	
    - `img` : 그림을 그릴 이미지

    - `center` : 원의 중심 좌표(x, y)

    - `radius` : 반지름

    - `color` : BGR형태의 Color

    - `thickness` : 선의 두께, -1 이면 원 안쪽을 채움

cv2.circle(img, (447, 63), 63, (0, 0, 255), -1) # img 원본값도 변화된다 ★

plt.imshow(img)
plt.show()

img = cv2.circle(img, (63, 447), 63, (0, 255, 255), 2)

plt.imshow(img)
plt.show()

## ellipse(타원) 그리기

- `cv2.ellipse()`

  - `Parameters`  
    
    - `img` : image

    - `center` : 타원의 중심

    - `axes` : 중심에서 가장 큰 거리와 작은 거리

    - `angle` : 타원의 기울기 각

    - `startAngle` : 타원의 시작 각도

    - `endAngle` : 타원이 끝나는 각도

    - `color` : 타원의 색

    - `thickness` : 선 두께. -1이면 안쪽을 채움


img = cv2.ellipse(img,
                 center=(255,255),
                 axes=(150, 30),
                 angle=0,
                 startAngle=0,
                 endAngle=180,
                color=(0, 255, 0),
                  thickness=-1,
                 )

plt.imshow(img)
plt.show()

img = cv2.ellipse(img, (255, 255), (150, 50), 45, 0, 360, (255, 255, 255), 2)

plt.imshow(img)
plt.show()

img = cv2.ellipse(img, (255, 255), (150, 10), 135, 0, 270, (0, 0, 255), 2)

plt.imshow(img)
plt.show()

## Polygon 그리기

- `cv2.polylines()`
  
  - `Parameters`	
    
    - `img` : image

    - `pts` (array) : 연결할 꼭지점 좌표

    - `isClosed` : 닫힌 도형 여부

    - `color` : Color

    - `thickness` : 선 두께

- 이미지에 표현하기 위해 점 좌표를 3차원 행렬로 변환. 
  - 변환이전과 이후의 행렬 갯수는 동일해야함.

  -  -1은 원본에 해당하는 값을 그대로 유지.

# 4개의 꼭지점 준비
pts = np.array([[10, 5], [20, 30], [70, 20], [50, 10]], np.int32)

pts.shape

# 이미지에 적용하려면 3차원 행렬로 준비해야 한다
pts = pts.reshape((-1, 2, 1))
pts.shape

img = cv2.polylines(img, [pts], True, (0, 155, 255), 5)

plt.imshow(img)
plt.show()

# 4개의 꼭지점 준비
pts2 = np.array([[150, 5], [200, 30], [100, 70], [50, 20]], np.int32)

pts2.shape

pts2 = pts2.reshape((-1, 2, 1))
pts2.shape

img = cv2.polylines(img, [pts2], True, (172, 200, 255), 4)

plt.imshow(img)
plt.show()

## Text 추가하기

- `cv2.putText()`

  - `Parameters` 	
    - `img` : image

    - `text` : 표시할 문자열

    - `org` : 문자열이 표시될 위치. 문자열의 **bottom-left corner 점**

    - `font` : font type. CV2.FONT_XXX

    - `fontScale` : Font Size

    - `color` : fond color
    
    - `thickness` : 두께

img = cv2.putText(img, 'OpenCV', (10, 500), cv2.FONT_HERSHEY_SIMPLEX, 4, (255, 255, 255), 3)

plt.imshow(img)
plt.show()
