# <hr>NumPy
<img src="https://numpy.org/images/logo.svg" width="100" height="100"/>

[공식] (https://numpy.org/)

# numpy : 수치적 연산을 위해 최적화된 모듈
#  파이썬을 활용한 데이터 분석에서  가장 기본!
#  이 자체로도 많이 쓰이거니와, 앞으로 배울 pandas, 머신러닝 등 수많은 분야에서 기본적으로 사용하는 모듈
#  파이썬 개발자라면 꼭 익힐 필요 있다

# 수학수치 연산  (numerical python) / 합, 평균, 행렬연산 등..
# 추가적으로 scipy, statsmodel  같은 것들도 numpy 기반으로 구현됨.   
# 상황에 따라, pandas 안써도 numpy 만으로도 가능.

# 기본 타입 : ndarray  (n-dimensional array) 다차원 배열 표현

# 파이썬에 list 가 있는데 굳이? 왜?  -

# numpy 를 사용하는 이유
# 1. 성능 : 성능적으로 훨~씬 빠름.
# 2. 메모리 : 훨씩 적은 메모리사용
# 3. 제공함수풍부 : 선형대수, 통계관련 여러 수치함수 제공
# 4. 수많은 모듈에서 numpy 함수명 과 기능을 그대로 사용.


import numpy as np

![aaa](https://statkclee.github.io/deep-learning/fig/tensor.jpg)

**Scalar** : 0차원 array (단일값)

**Vector** : 1차원 array

**Matrix** : 2차원 array

**Tensor** : 3차원(이상) array

## 1차원 array(벡터) 생성

x = np.array([1, 2, 3])
y = np.array([2, 4, 15])

x, y

print(x)
print(y)

import matplotlib.pyplot as plt

plt.plot(x, y)

### ndarray 가 빠른 이유

![image.png](attachment:image.png)

ndarray 는 'C언어' 로 만들어져 있다

Vectorization 을 사용하여 한번에 한 연산을 묶음으로 실행

# ndarray 만들기, np.array() 
n-dimensional 배열(array)

# scalar
np.array(10)

# 1차원 array 만들기
arr = np.array([1, 2, 3, 4, 5])
arr

type(arr)

# shape, size, ndim, len(), dtype 

#### shape
array의 크기를 알수 있다.

shape 를 확인함으로써 몇개의 데이터가 몇 차원으로 존재하는지 확인할수 있다

arr.shape
#  (5, )   tuple 의 형태로 결과.   ndarray 가 몇차원인지 몇개의 데이터로 구성되었는지 보여줌

#### size
데이터의 개수

arr.size  # 데이터의 개수다, shape 와 다른 의미

#### ndim
몇차원 데이터?

arr.ndim

len(arr.shape)  # arr.ndmin 과 같은 결과

#### len()

len(arr)    # .size 와는 다르다

#### dtype
array 의 데이터타입

arr.dtype

# list 는 각 원소의 데이터 타입이 달라도 되나
# ndarray 는 데이터 타입이 하나로 관리 된다.

arr2 = np.array([10, 3.14, 2, 0.12])
arr2

arr2.dtype

arr2 = np.array(['a', '3.14', '2', '0', '12'])
arr2

arr2.dtype

# numpy 자료형
# arr1이나 arr2는 int64라는 자료형을 갖는 것에 반해 arr3는 float64라는 자료형을 갖는다.
# 이는 arr3내부 데이터를 살펴보면 3.5라는 실수형 데이터를 갖기 때문임을 알 수 있다.
# numpy에서 사용되는 자료형은 아래와 같다. (자료형 뒤에 붙는 숫자는 몇 비트 크기인지를 의미한다.)

# 부호가 있는 정수 int(8, 16, 32, 64)
# 부호가 없는 정수 uint(8 ,16, 32, 64)
# 실수 float(16, 32, 64, 128)
# 복소수 complex(64, 128, 256)
# 불리언 bool
# 문자열 string_
# 파이썬 오프젝트 object
# 유니코드 unicode_

### 2차원 array 생성

x = np.array([1, 2, 3, 4])
x

y = np.array([[2, 3, 4], [1, 2, 4]])
y

y.shape

y.ndim

len(y.shape)

y.size  # 배열 안의 데이터 개수

len(y)   # 2차원 배열이 갖고 있는 1차원 배열의 개수

y.dtype

## 3차원 ndarray 만들기
2차원 array ?  = (1차원 )array 를 갖고 있는 array <br>
3차원 array ?  = 2차원 array 를 갖고 있는 array <br>
4차원 array ?  = 3차원 array 를 갖고 있는 array 

# 2 x 3 x 4

z = np.array([
    [
        [1, 2, 3, 4],
        [5, 6, 7, 8],
        [9, 10, 11, 12],
    ],
    [
        [101, 102, 103, 104],
        [201, 202, 203, 204],
        [301, 302, 303, 304],
    ],
])

z

z.shape

z.size

z.ndim

len(z)

##### 똑같은 값이라도 차원이 다를수 있다
차원변환! 중요

np.array(10)

np.array([10])

np.array([[10]])

np.array([[[10]]])

### np.arange 함수로 생성 

# 파이썬의 range 와 거의 동일

# np.array(iterable)

np.array(range(10))

np.arange(10)  # 0 ~ 9

np.arange(1, 10)  # 1 ~ 9

np.arange(1, 10, 2)  # step

# 도전) 5 ~ 100 사이의 5의 배수로 구성된 1차원 ndarray 생성
"""
array([  5,  10,  15,  20,  25,  30,  35,  40,  45,  50,  55,  60,  65,
        70,  75,  80,  85,  90,  95, 100])
"""
None

np.arange(5, 101, 5)

np.arange(10, 0, -1)

##### dtype 명시하여 array 생성 가능

np.arange(3, 10, dtype=np.float64)

np.arange(3, 10, dtype=np.int16)

np.arange(3, 10, dtype="int16")

#### astype(타입)
타입변환한 array 리턴 (원본 변화 없슴)

d = np.arange(3, 10)
d.dtype

d2 = d.astype(np.float64)
d2

d2.dtype

d

## reshape() 
 - ndarray의 형태, 차원을 바꾸기 위해 사용
 - 머신러닝, 데이터 프로세싱에서 매우 자주 사용됨. (차원변환)

np.arange(12)

np.arange(12).reshape(2, 6)  # (12,) -> (2, 6)  2차원 array 로 reshape

# np.arange(12).reshape(2, 5)   # size 맞지 않으면 에러

np.arange(12).reshape(3, 4)

np.arange(12).reshape(3, 2, 2)

##### np.ones, np.zeros 로 array 생성하기

np.ones(5)   # size 1, 1차원 array

np.ones(5, dtype="int16")

# 모든 원소가 1 로 구성된 ( 2 x 3 )2차원 array
# tuple 로 매개변수 주면 된다

np.ones((2, 3))

np.ones(6).reshape(2, 3)  # 동일한 결과

np.ones((2, 3, 4))

np.zeros((2, 3))

np.zeros((2, 3, 8))

#### np.empty, np.full 로 array 생성하기

np.empty((3, 4))  # 초기화가 안된 값들로 만든 array (쓰레기값 으로 생성)

# 초기화가 안되있어서 빠르게 생성된다.
# 물론 0 으로 되어 있는 경우도 있지만, 항상 보장되는 건 아니다 (주의!)

np.full((3, 4), 7)  # 7로만 이루어진 3 x 4 array

#### np.eye로 생성하기
 - 단위 행렬 생성  
 - 2차원, 행과 열의 크기가 같다
 - 대각선 값이 1 이로 나머지는 0
 - 선형대수 등 행렬곱에서 중요한 행렬

np.eye(5)

#### np.linspace로 생성하기
- 그래프 등을 생성할때 x 축 좌표를 균등하게 만들고 싶을때 사용

np.linspace(1, 10, 3)  # (start, stop, num)

np.linspace(1, 10, 4)



































































































